"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[461],{3905:(e,r,t)=>{t.d(r,{Zo:()=>l,kt:()=>m});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),p=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},l=function(e){var r=p(e.components);return n.createElement(s.Provider,{value:r},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},h=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(t),h=o,m=u["".concat(s,".").concat(h)]||u[h]||f[h]||a;return t?n.createElement(m,i(i({ref:r},l),{},{components:t})):n.createElement(m,i({ref:r},l))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=h;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var p=2;p<a;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},5415:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var n=t(7462),o=(t(7294),t(3905));const a={sidebar_position:2},i="Schnorr signature scheme",c={unversionedId:"learn/crypto-params/schnorr",id:"learn/crypto-params/schnorr",title:"Schnorr signature scheme",description:"The Topos protocol adapts a Schnorr signature scheme for efficient verification inside the Topos STARK proving system, by replacing the commonly used binary hash function to an algebraically efficient one, the Rescue-Prime hash function.",source:"@site/docs/learn/crypto-params/schnorr.md",sourceDirName:"learn/crypto-params",slug:"/learn/crypto-params/schnorr",permalink:"/learn/crypto-params/schnorr",draft:!1,editUrl:"https://github.com/toposware/docs/edit/master/docs/learn/crypto-params/schnorr.md",tags:[],version:"current",lastUpdatedBy:"S\xe9bastien Dan",lastUpdatedAt:1682608932,formattedLastUpdatedAt:"Apr 27, 2023",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"STARKs",permalink:"/learn/crypto-params/stark"},next:{title:"Overview",permalink:"/build/overview"}},s={},p=[],l={toc:p},u="wrapper";function f(e){let{components:r,...t}=e;return(0,o.kt)(u,(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"schnorr-signature-scheme"},"Schnorr signature scheme"),(0,o.kt)("p",null,"The Topos protocol adapts a Schnorr signature scheme for efficient verification inside the Topos STARK proving system, by replacing the commonly used binary hash function to an algebraically efficient one, the Rescue-Prime hash function."),(0,o.kt)("p",null,"The internal design of the signing process (and hence of the verification algorithm as well) follows the specification used in libsecp256k1, deviating from the original version by a difference in the output of the signing phase. This design choice is justified by Bellare, et al.",(0,o.kt)("sup",null,(0,o.kt)("a",{parentName:"p",href:"#ref-a"},"1"))," showing that Schnorr signatures as implemented in libsecp256k1 can achieve semi-strong unforgeability, while the original construction of Claus Schnorr can only provide normal unforgeability."),(0,o.kt)("sub",null,"[1] ",(0,o.kt)("a",{id:"ref-1",href:"https://www.iacr.org/archive/eurocrypt2004/30270269/bnn.pdf"},"https://www.iacr.org/archive/eurocrypt2004/30270269/bnn.pdf")))}f.isMDXComponent=!0}}]);