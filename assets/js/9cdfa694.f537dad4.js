"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[461],{3905:function(e,r,n){n.d(r,{Zo:function(){return l},kt:function(){return h}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),p=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},l=function(e){var r=p(e.components);return t.createElement(s.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),f=p(n),h=o,m=f["".concat(s,".").concat(h)]||f[h]||u[h]||i;return n?t.createElement(m,a(a({ref:r},l),{},{components:n})):t.createElement(m,a({ref:r},l))}));function h(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var p=2;p<i;p++)a[p]=n[p];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5415:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return l},default:function(){return f}});var t=n(3117),o=n(102),i=(n(7294),n(3905)),a=["components"],c={sidebar_position:2},s="Schnorr signature scheme",p={unversionedId:"learn/crypto-params/schnorr",id:"learn/crypto-params/schnorr",title:"Schnorr signature scheme",description:"The Topos protocol adapts a Schnorr signature scheme for efficient verification inside the Topos STARK proving system, by replacing the commonly used binary hash function to an algebraically efficient one, the Rescue-Prime hash function.",source:"@site/docs/learn/crypto-params/schnorr.md",sourceDirName:"learn/crypto-params",slug:"/learn/crypto-params/schnorr",permalink:"/learn/crypto-params/schnorr",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"STARKs",permalink:"/learn/crypto-params/stark"},next:{title:"Overview",permalink:"/build/overview"}},l=[],u={toc:l};function f(e){var r=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"schnorr-signature-scheme"},"Schnorr signature scheme"),(0,i.kt)("p",null,"The Topos protocol adapts a Schnorr signature scheme for efficient verification inside the Topos STARK proving system, by replacing the commonly used binary hash function to an algebraically efficient one, the Rescue-Prime hash function."),(0,i.kt)("p",null,"The internal design of the signing process (and hence of the verification algorithm as well) follows the specification used in libsecp256k1, deviating from the original version by a difference in the output of the signing phase. This design choice is justified by Bellare, et al.",(0,i.kt)("sup",null,(0,i.kt)("a",{parentName:"p",href:"#ref-a"},"1"))," showing that Schnorr signatures as implemented in libsecp256k1 can achieve semi-strong unforgeability, while the original construction of Claus Schnorr can only provide normal unforgeability."),(0,i.kt)("sub",null,"[1] ",(0,i.kt)("a",{id:"ref-1",href:"https://www.iacr.org/archive/eurocrypt2004/30270269/bnn.pdf"},"https://www.iacr.org/archive/eurocrypt2004/30270269/bnn.pdf")))}f.isMDXComponent=!0}}]);