"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[387],{3905:function(e,t,i){i.d(t,{Zo:function(){return l},kt:function(){return p}});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function s(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var c=n.createContext({}),h=function(e){var t=n.useContext(c),i=t;return e&&(i="function"==typeof e?e(t):s(s({},t),e)),i},l=function(e){var t=h(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=h(i),p=a,g=d["".concat(c,".").concat(p)]||d[p]||u[p]||r;return i?n.createElement(g,s(s({ref:t},l),{},{components:i})):n.createElement(g,s({ref:t},l))}));function p(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,s=new Array(r);s[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var h=2;h<r;h++)s[h]=i[h];return n.createElement.apply(null,s)}return n.createElement.apply(null,i)}d.displayName="MDXCreateElement"},3564:function(e,t,i){i.r(t),i.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return h},toc:function(){return l},default:function(){return d}});var n=i(3117),a=i(102),r=(i(7294),i(3905)),s=["components"],o={sidebar_position:4},c="Authentication",h={unversionedId:"learn/uci/authentication",id:"learn/uci/authentication",title:"Authentication",description:"Digital Signatures and Authentication",source:"@site/docs/learn/uci/authentication.md",sourceDirName:"learn/uci",slug:"/learn/uci/authentication",permalink:"/learn/uci/authentication",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Certificate",permalink:"/learn/uci/certificate"},next:{title:"State Transitions Validity",permalink:"/learn/uci/state-transitions-validity"}},l=[{value:"Digital Signatures and Authentication",id:"digital-signatures-and-authentication",children:[],level:2},{value:"Threshold Signatures: ICE-FROST",id:"threshold-signatures-ice-frost",children:[{value:"ICE-FROST in Topos",id:"ice-frost-in-topos",children:[],level:3},{value:"ICE-FROST Protocol Outline",id:"ice-frost-protocol-outline",children:[{value:"Preliminaries",id:"preliminaries",children:[{value:"Schnorr Signature Algorithm",id:"schnorr-signature-algorithm",children:[],level:5}],level:4},{value:"Distributed Key Generation (DKG): Initial Run",id:"distributed-key-generation-dkg-initial-run",children:[],level:4},{value:"Updating Shares",id:"updating-shares",children:[],level:4},{value:"Preprocessing",id:"preprocessing",children:[],level:4},{value:"Signing",id:"signing",children:[],level:4}],level:3},{value:"Benefits of ICE-FROST over FROST",id:"benefits-of-ice-frost-over-frost",children:[],level:3},{value:"Future Work and Next Steps",id:"future-work-and-next-steps",children:[],level:3}],level:2}],u={toc:l};function d(e){var t=e.components,i=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"authentication"},"Authentication"),(0,r.kt)("h2",{id:"digital-signatures-and-authentication"},"Digital Signatures and Authentication"),(0,r.kt)("p",null,"To prevent spamming, false identity and data tampering, Topos leverages ",(0,r.kt)("strong",{parentName:"p"},"digital signatures")," to ensure certificates are attributed to the right originators, i.e., the subnets that submit them to prove and ensure that integrity is retained during their propagation. As seen previously, signatures are included with certificates and hence can be validated prior to verifying the certificate validity using the public key of the associated subnet."),(0,r.kt)("p",null,"A basic digital signature allows an individual entity to sign a message. However, in blockchain environments, we tend to distribute trust among a group of participants rather than a single entity. While multi-signatures give the signing authority to a predefined group of entities, in threshold signatures ",(0,r.kt)("em",{parentName:"p"},"any")," group of signers of sufficiently large cardinality are able to sign valid messages."),(0,r.kt)("p",null,"Authentication is achieved in the Topos ecosystem via our ",(0,r.kt)("a",{parentName:"p",href:"https://eprint.iacr.org/2021/1658.pdf"},"ICE-FROST Threshold Signature Scheme"),"."),(0,r.kt)("h2",{id:"threshold-signatures-ice-frost"},"Threshold Signatures: ICE-FROST"),(0,r.kt)("p",null,"To allow a non-unary and dynamic set of signers to sign certificates against a static public key, Topos makes use of ",(0,r.kt)("strong",{parentName:"p"},"ICE-FROST"),", an in-house customization of the ",(0,r.kt)("a",{parentName:"p",href:"https://eprint.iacr.org/2020/852.pdf"},"FROST")," threshold signature scheme."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Threshold Signature")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"A ",(0,r.kt)("inlineCode",{parentName:"p"},"(t, n)"),"-threshold signature scheme is a multi-party digital signature protocol such that any honest subset of ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," signers with cardinality at least ",(0,r.kt)("inlineCode",{parentName:"p"},"t")," is able to successfully create a valid signature."))),(0,r.kt)("p",null,"A desired property of threshold signature schemes is ",(0,r.kt)("strong",{parentName:"p"},"robustness")," in the sense that the protocol can tolerate cheating of a limited number of participants. A robust scheme will run successfully despite cheating participants, if the number of such is below the given limit. If this goal is guaranteed to be attained after at most a bounded number of re-runs of the protocol, we refer to the property as ",(0,r.kt)("em",{parentName:"p"},"semi-robustness"),". Our customizations augment FROST with robustness in the distributed key generation phase. The robustness is achieved via the exact ",(0,r.kt)("strong",{parentName:"p"},"identification and exclusion of a cheating entity")," during the key generation. Identifying cheaters further can conclude in preventing cheating if suitable punishments are predicted. The protocol also has two additional important properties that are tailored for our Topos design, namely:"),(0,r.kt)("p",null,"i) achieving ",(0,r.kt)("strong",{parentName:"p"},"semi-robustness")," during signing by appropriate choice of the set of the signers, besides taking advantage of the cheating identification property during key generation, and"),(0,r.kt)("p",null,"ii) allowing a blockchain network to distribute a ",(0,r.kt)("strong",{parentName:"p"},"static long-running verification key")," with respect to which different sets of signers can produce signatures. This allows the verification key associated with each subnet to stay static while the set of signers can vary easily. This is a key feature of subnets, i.e., dynamic networks whose participating nodes arbitrarily join and leave."),(0,r.kt)("h3",{id:"ice-frost-in-topos"},"ICE-FROST in Topos"),(0,r.kt)("p",null,"ICE-FROST is used in Topos for signing certificates. The main purpose of signing is authenticating the subnet creating the certificate and verifying its integrity, i.e., ensuring that it was not altered while in transit. The number of signers required to generate a valid signature with ICE-FROST can be freely chosen by the subnet. A malicious party would then need to control more than the threshold to sign a certificate committing to an arbitrary state that honest signers disagree with, or to equivocate on two ",(0,r.kt)("a",{parentName:"p",href:"/learn/tce/conflicting-certificates"},"conflicting certificates"),"."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"In practice, we expect most subnets to run a BFT consensus mechanism, so we recommend a threshold greater than one third of the total number of validators."))),(0,r.kt)("p",null,"A greater threshold value increases security at the cost of availability: if there isn't enough honest signers to reach the threshold, then the subnet might be unable to sign the certificate."),(0,r.kt)("p",null,"When a subnet registration takes place, the initial set of signers runs the initial DKG phase, as a result of which they obtain a static ICE-FROST verification key that is required to verify certificate signatures. This verification key is included in the subnet's ",(0,r.kt)("a",{parentName:"p",href:"/learn/subnets/integration-flow#registration"},"registration certificate")," and remains static for the lifetime of the given subnet. Since the verification key is designed to be static, the redistribution of shares does not change the group signing and verification keys. Note that both the initial and redistribution phases are ",(0,r.kt)("strong",{parentName:"p"},"dealerless"),"."),(0,r.kt)("p",null,"The generated signature has format identical to a regular Schnorr signature (even though it is generated by a group of signers instead of individual ones), hence can be verified by any entity capable of verifying Schnorr signatures. Therefore, checking the certificate signature before processing the certificate is very fast and effectively prevents spamming if an adversary sends multiple certificates with invalid signatures."),(0,r.kt)("h3",{id:"ice-frost-protocol-outline"},"ICE-FROST Protocol Outline"),(0,r.kt)("p",null,"In this section, we will provide an outline of ICE-FROST."),(0,r.kt)("h4",{id:"preliminaries"},"Preliminaries"),(0,r.kt)("h5",{id:"schnorr-signature-algorithm"},"Schnorr Signature Algorithm"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://link.springer.com/article/10.1007/BF00196725"},"Schnorr signature algorithm")," is a digital signature algorithm. FROST and ICE-FROST are both based on Schnorr, hence we will briefly describe it here."),(0,r.kt)("p",null,"Schnorr signatures are constructed based on the Sigma protocol structure. Sigma protocols consist of three message transmissions between a prover and a verifier; i) the prover sends a commitment value to the verifier, ii) the verifier sends a uniformly random challenge to the prover, and iii) the prover answers to the challenge using some public function, and a witness. The prover is the signer in the Schnorr signature scheme and the witness is the secret key held by the signer that is kept secret using the discrete log hardness assumption. The signature scheme is made and used non-interactively using ",(0,r.kt)("a",{parentName:"p",href:"https://link.springer.com/content/pdf/10.1007/3-540-47721-7_12.pdf"},"Fiat-Shamir transform")," that is using the output (digest) of a hash function with input of the commitment, witness and the message instead of the challenge value."),(0,r.kt)("h4",{id:"distributed-key-generation-dkg-initial-run"},"Distributed Key Generation (DKG): Initial Run"),(0,r.kt)("p",null,"ICE-FROST distributed key generation protocol is based on the ",(0,r.kt)("a",{parentName:"p",href:"https://link.springer.com/chapter/10.1007/3-540-46416-6_47"},"DKG algorithm of Pedersen"),", which is a distributed secret sharing scheme, constructed over ",(0,r.kt)("a",{parentName:"p",href:"https://dl.acm.org/doi/abs/10.1145/359168.359176"},"Shamir's Secret Sharing"),". All participants of the DKG algorithm ",(0,r.kt)("em",{parentName:"p"},"securely")," distribute their randomly chosen secrets among other participants. Since no participant is trusted prior to execution of the protocol, a ",(0,r.kt)("em",{parentName:"p"},"verifiable")," secret sharing scheme is used that allows participants to verify if the received share is consistent with others. Verifiability is achieved by enforcing each participant to commit to its chosen secret (and to the corresponding polynomial that is used for secret sharing) and broadcasting the commitment values at the beginning of the protocol. After successful sharing of secrets, participants interpolate their received shares to compute their private signing share. The group's public verification key is calculated using the publicly broadcasted commitments."),(0,r.kt)("p",null,"To enable cheating identifiability in ICE-FROST, each participant chooses a pair of ephemeral public and private keys for each secret dealing and publishes the public key and proof of knowledge of the corresponding private key. In order to securely send shares to each participant, a ",(0,r.kt)("a",{parentName:"p",href:"https://ee.stanford.edu/%7Ehellman/publications/24.pdf"},"Diffie-Hellman (DH) key agreement")," is run to establish a secret key between the sender and receiver of the given share. This key is used to securely encrypt the share that is sent out to the corresponding receiver. If a participant cheats by sending out an inconsistent share, the receiver will catch it using the initially published commitment. However, since shares are transmitted in the encrypted form, the receiver of the malformed share has to reveal the mutually established DH key, as well as proof of its correctness, to convince other participants that it has received a malformed share. If the receiver lies and accuses an honest participant of sending a malformed share, it will be caught itself after other participants check its complaint using the revealed DH key."),(0,r.kt)("h4",{id:"updating-shares"},"Updating Shares"),(0,r.kt)("p",null,"Participants' shares are updated by running the ",(0,r.kt)("em",{parentName:"p"},"key update protocol")," which is a redistribution of secret shares to provide each shareholder with a fresh signing share while allowing new participants to join or the old ones to leave the protocol. Even if the set of participants stays the same, it is recommended to run the key update protocol every once in a while (e.g., every six hours) to maintain the security of distributed keys. To redistribute the secret key, each participant distributes its secret signing share using the described DKG. If required, the set of participants and the scheme's parameters (the threshold and the total number of participants) can be updated during each run of the key update protocol, while still preserving the static key."),(0,r.kt)("h4",{id:"preprocessing"},"Preprocessing"),(0,r.kt)("p",null,"As mentioned above, in a Schnorr signature scheme, the signer initially generates a commitment to a random nonce and sends it to the verifier. In a threshold Schnorr signature scheme, the nonce generation (as well as the private/public key generation) should be made distributed such that any set of at least ",(0,r.kt)("inlineCode",{parentName:"p"},"t")," participants can generate a valid nonce and corresponding commitment. The distributed nonce can be generated by running a separate round of DKG algorithm. However, in order to avoid adding an extra round to the protocol and achieve a round-optimized protocol, the nonce and its commitment can be generated during a preprocessing round. For this, each participant generates a list of single-use private nonce pairs and corresponding public commitment shares. Each entry of the list will be used for signing one message and once all are used, the preprocessing round will re-run."),(0,r.kt)("h4",{id:"signing"},"Signing"),(0,r.kt)("p",null,"A group of signers with at least ",(0,r.kt)("inlineCode",{parentName:"p"},"t")," members is randomly selected to generate the ",(0,r.kt)("inlineCode",{parentName:"p"},"(t, n)"),"-threshold signature. However, the generation of a valid signature requires the cooperation of at least ",(0,r.kt)("inlineCode",{parentName:"p"},"t")," ",(0,r.kt)("strong",{parentName:"p"},"honest")," participants. If a participant cheats during signing and uses an unmatching signing key, it will be detected. At this point, the signing protocol will run from the beginning but exclude the cheating participant. As long as the initially chosen set of signers contains enough honest signers, the signing protocol will successfully generate a valid signature (semi-robustness property). To ensure semi-robustness or achieve it with high probability, a large enough set of signers (or even all of the participants) should be chosen, at the cost of more communication between participants and a heavier protocol."),(0,r.kt)("p",null,"After the random set of signers is selected, they will fetch each other's commitments that have been published and stored during the preprocessing round. Each participant checks the validity of the obtained values and calculates a ",(0,r.kt)("em",{parentName:"p"},"binding value")," to the message and the group of signers. Then, each one of them derives another commitment value that binds the message, the set of signing participants, and each participant's commitment to each signature share. This latter commitment will be used to calculate the group's commitment value. The challenge value of Schnorr's signature will then be generated by applying a hash function on the group's commitment value, public verification key and message. Each participant responds to the challenge, using its committed nonces (from preprocessing) and their signing key share. Every participant then checks the validity of responses and, if they all passed, adds all the responses to generate the group's threshold signature. All honest participants will end up with the same valid signature. Note that if any of the checks during signing fails, the signing phase will have to be re-run from the beginning, excluding the set of discovered malicious signers."),(0,r.kt)("h3",{id:"benefits-of-ice-frost-over-frost"},"Benefits of ICE-FROST over FROST"),(0,r.kt)("p",null,"The main benefits of ICE-FROST over its predecessor FROST are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Robustness of the key generation phase, meaning that we are guaranteed to obtain a verification key and/or redistribute the shares, without aborting the protocol."),(0,r.kt)("li",{parentName:"ul"},"Providing ",(0,r.kt)("em",{parentName:"li"},"optional")," semi-robustness for the signing protocol. Each subnet can trade efficiency with the size of the set of signers for semi-robustness guarantee. The more signers means the heavier protocol but an increased guarantee of successfully generating a valid signature."),(0,r.kt)("li",{parentName:"ul"},"Provable identifiability of cheating entities, who are either sending malformed shares or making false accusations."),(0,r.kt)("li",{parentName:"ul"},"Redistribution feature of shares, which allows the group public key to be static, meaning that it could be used for as long as required by the group.")),(0,r.kt)("h3",{id:"future-work-and-next-steps"},"Future Work and Next Steps"),(0,r.kt)("p",null,"ICE-FROST, as previously mentioned, has a robust distributed key generation phase. The next step is to make the signing phase robust as well. At the moment, it is semi-robust, due to the fact that it will need to be re-run if at least one of the signers is malicious. Given that the malicious participants are excluded in the next run and re-runs, the signature is still generated. Thus, a logical next step is to make signing run only once per certificate. This will most likely come at a cost. Thus, we see this next step as an additional option, rather than a replacement of the current one."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Notice that having both options available would not cause any interoperability issues, as the final signature in any case will be a Schnorr signature with respect to the given group public key and hence can still be verified by any entity with ability to verify Schnorr signatures."))))}d.isMDXComponent=!0}}]);