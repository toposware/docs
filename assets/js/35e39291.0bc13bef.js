"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[454],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return h}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=u(n),h=i,b=f["".concat(c,".").concat(h)]||f[h]||p[h]||o;return n?r.createElement(b,a(a({ref:t},l),{},{components:n})):r.createElement(b,a({ref:t},l))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4714:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return f}});var r=n(3117),i=n(102),o=(n(7294),n(3905)),a=["components"],s={sidebar_position:2},c="Integration Flow",u={unversionedId:"learn/subnets/integration-flow",id:"learn/subnets/integration-flow",title:"Integration Flow",description:"Connection to the TCE",source:"@site/docs/learn/subnets/integration-flow.md",sourceDirName:"learn/subnets",slug:"/learn/subnets/integration-flow",permalink:"/learn/subnets/integration-flow",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/learn/subnets/overview"},next:{title:"Cross-Subnet Transactions",permalink:"/learn/subnets/cross-subnet-transactions"}},l=[{value:"Connection to the TCE",id:"connection-to-the-tce",children:[],level:2},{value:"Registration",id:"registration",children:[],level:2},{value:"Interactions with other subnets",id:"interactions-with-other-subnets",children:[],level:2}],p={toc:l};function f(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"integration-flow"},"Integration Flow"),(0,o.kt)("h2",{id:"connection-to-the-tce"},"Connection to the TCE"),(0,o.kt)("p",null,"Once built on top of a UCI implementation, a subnet connects to the ",(0,o.kt)("a",{parentName:"p",href:"/learn/tce/overview"},"TCE")," to start interacting with other subnets in the ecosystem. The TCE node discovery mechanism is based on hardcoded DNS seeds which serve dynamic lists of TCE node IP addresses."),(0,o.kt)("h2",{id:"registration"},"Registration"),(0,o.kt)("p",null,"Upon connecting to TCE nodes, a subnet registers itself with the TCE. The subnet registration consists in the submission of a ",(0,o.kt)("a",{parentName:"p",href:"/learn/uci/subnet-registration"},"registration certificate"),", a certificate that includes the initial state of the subnet\u2014relatively to its lifetime in the TCE\u2014and its long-lived public key (for certificate ",(0,o.kt)("a",{parentName:"p",href:"/learn/uci/authentication"},"authentication"),"). The initial state is stored by TCE nodes to validate subsequent state transitions, while both TCE nodes and subnets save the long-lived public key to authenticate future certificates."),(0,o.kt)("h2",{id:"interactions-with-other-subnets"},"Interactions with other subnets"),(0,o.kt)("p",null,"Once known to the rest of the Topos ecosystem, a subnet can start interacting with other subnets, i.e., exchanging ",(0,o.kt)("a",{parentName:"p",href:"#cross-subnet-transactions"},"cross-subnet transactions"),", by submitting ",(0,o.kt)("a",{parentName:"p",href:"/learn/uci/overview#certificate"},"certificates")," that comply with the specifications defined in the UCI."))}f.isMDXComponent=!0}}]);